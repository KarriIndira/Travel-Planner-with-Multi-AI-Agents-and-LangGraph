# -*- coding: utf-8 -*-
"""Travel Planner AI Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tYIVMOCzXzhiWqUICPxLLrnSmhBY6XSG
"""

!pip install langchain langchain_core langchain_groq langchain_community langchain langgraph

import os
from typing import TypedDict, Annotated, List
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables.graph import MermaidDrawMethod
from IPython.display import display, Image

class PlannerState(TypedDict):
  messages : Annotated[List[HumanMessage | AIMessage], "the messages in the conversation"]
  city: str
  interests: List[str]
  itinerary: str

from langchain_groq import ChatGroq
llm = ChatGroq(
    temperature = 0,
    groq_api_key = "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",
    model_name = "llama-3.3-70b-versatile"
)

itinerary_prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful travel assistant. Create a day trip itinerary for {city} based on the user's interests: {interests}. Provide a brief, bulleted itinerary."),
    ("human", "Create an itinerary for my day trip."),
])

def input_city(state: PlannerState) -> PlannerState:
  print("Please enter the city you want to visit for your day trip: ")
  user_message = input("Your Input: ")
  return {
      **state,
      "city": user_message,
      "messages": state['messages'] + [HumanMessage(content=user_message)]
  }

def input_interest(state: PlannerState) -> PlannerState:
  print(f"Please enter your interest for the trip to : {state['city']} (comma-separted): ")
  user_message = input("Your Input: ")
  return {
      **state,
      "interests": [interest.strip() for interest in user_message.split(",")],
      "messages": state['messages'] + [HumanMessage(content=user_message)]
  }
def create_itinerary(state: PlannerState) -> PlannerState:
  print(f"Creating an itinerary for {state['city']} based on interests : {', '.join(state['interests'])}")
  response = llm.invoke(itinerary_prompt.format_messages(city = state['city'], interests = ','.join(state['interests'])))
  print("\nFinal Itinerary: ")
  print(response.content)
  return {
      **state,
      "messages": state['messages'] + [AIMessage(content=response.content)],
      "itinerary" : response.content,
  }

workflow = StateGraph(PlannerState)

workflow.add_node("input_city", input_city)
workflow.add_node("input_interest", input_interest)
workflow.add_node("create_itinerary", create_itinerary)

workflow.set_entry_point("input_city")

workflow.add_edge("input_city", "input_interest")
workflow.add_edge("input_interest", "create_itinerary")
workflow.add_edge("create_itinerary", END)

app = workflow.compile()

display(
    Image(
        app.get_graph().draw_mermaid_png(
            draw_method = MermaidDrawMethod.API
        )
    )
)

def travel_planner(user_request: str):
  print(f"Initial Request: {user_request}\n")
  state = {
      "messages": [HumanMessage(content=user_request)],
      "city": "",
      "interests": [],
      "itinerary": "",
  }
  for output in app.stream(state):
    pass

user_request = "I want to plan a day trip"
travel_planner(user_request)

!pip install gradio

import gradio as gr
from typing import TypedDict, Annotated, List
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq
import requests
from fpdf import FPDF
import os

class PlannerState(TypedDict):
    messages: Annotated[List[HumanMessage | AIMessage], "The messages in the conversation"]
    city: str
    interests: List[str]
    days: int
    itinerary: str

# Define the LLM
llm = ChatGroq(
    temperature=0,
    groq_api_key="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",
    model_name="llama3-70b-8192"
)

# Define the itinerary prompt
itinerary_prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful travel assistant. Create a {days}-day trip itinerary for {city} based on these interests: {interests}. Provide a brief, bulleted itinerary."),
    ("human", "Create an itinerary for my trip."),
])

def input_city(city: str, state: PlannerState) -> PlannerState:
    return {
        **state,
        "city": city,
        "messages": state['messages'] + [HumanMessage(content=city)],
    }

def input_interests(interests: str, state: PlannerState) -> PlannerState:
    return {
        **state,
        "interests": [interest.strip() for interest in interests.split(',')],
        "messages": state['messages'] + [HumanMessage(content=interests)],
    }

def input_days(days: int, state: PlannerState) -> PlannerState:
    return {
        **state,
        "days": days,
        "messages": state['messages'] + [HumanMessage(content=f"{days} day trip")],
    }

def get_image_url(query):
    # Using Unsplash source (no API key required)
    return f"https://source.unsplash.com/600x400/?{query}"

def create_itinerary(state: PlannerState) -> str:
    response = llm.invoke(itinerary_prompt.format_messages(
        city=state['city'],
        interests=", ".join(state['interests']),
        days=state['days']
    ))
    state["itinerary"] = response.content
    state["messages"] += [AIMessage(content=response.content)]
    return response.content

def travel_planner(city: str, interests: str, days: int):
    state = {
        "messages": [],
        "city": "",
        "interests": [],
        "days": days,
        "itinerary": "",
    }

    state = input_city(city, state)
    state = input_interests(interests, state)
    state = input_days(days, state)
    itinerary = create_itinerary(state)

    # Generate image links
    image_urls = [get_image_url(interest) for interest in state['interests']]
    image_html = "".join([f"<img src='{url}' width='300' style='margin:10px'/>" for url in image_urls])

    return f"### Your {days}-Day Itinerary for {city}\n\n{itinerary}", image_html

# Gradio Interface
interface = gr.Interface(
    fn=travel_planner,
    theme='Yntec/HaleyCH_Theme_Orange_Green',
    inputs=[
        gr.Textbox(label="Enter the city for your trip"),
        gr.Textbox(label="Enter your interests (comma-separated)"),
        gr.Slider(1, 5, step=1, label="Number of Days")
    ],
    outputs=[
        gr.Markdown(label="Generated Itinerary"),
        gr.HTML(label="Visual Inspiration")
    ],
    title="âœ¨ AI-Powered Travel Itinerary Planner",
    description="Generate a personalized multi-day travel itinerary with visual suggestions based on your interests."
)

interface.launch()

!pip install fpdf

